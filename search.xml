<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01-我的足迹</title>
    <url>/2021/08/03/01-%E6%88%91%E7%9A%84%E8%B6%B3%E8%BF%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我的足迹"><a href="#我的足迹" class="headerlink" title="我的足迹"></a>我的足迹</h2><p><img src="https://cdn.jsdelivr.net/gh/ailing666/images@master/2021/1627962230903-1627962230899-009ab009c185d053eb57474d868fce4.jpg"></p>
<h2 id="旅行经历"><a href="#旅行经历" class="headerlink" title="旅行经历"></a>旅行经历</h2><p>2021/4/26 - 2021/5/5 去了云南</p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Js数据类型</title>
    <url>/2021/08/03/01-Js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、为什么要区分不同的数据类型"><a href="#一、为什么要区分不同的数据类型" class="headerlink" title="一、为什么要区分不同的数据类型"></a>一、为什么要区分不同的数据类型</h1><p>在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数据类型，寓意也不同。</p>
<h1 id="二、JS中一共有七种数据类型"><a href="#二、JS中一共有七种数据类型" class="headerlink" title="二、JS中一共有七种数据类型"></a>二、JS中一共有七种数据类型</h1><ul>
<li><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol(ES6新增)。</li>
<li><strong>引用数据类型（引用类型）</strong>：Object 对象。</li>
</ul>
<p>注意：内置对象 Function、Array、Date、RegExp、Error等都是属于 Object 类型。也就是说，除了那六种基本数据类型之外，其他的，都称之为 Object类型。</p>
<h3 id="1-查看数据类型的方式typeof"><a href="#1-查看数据类型的方式typeof" class="headerlink" title="1.查看数据类型的方式typeof()"></a>1.查看数据类型的方式typeof()</h3><ul>
<li>typeof()返回的是一个字符串类型</li>
<li>typeof()检测的特殊值<ul>
<li>基本数据类型null返回的是object —&gt;  js历史遗留的bug</li>
<li>复杂数据类型function返回的是functiong —&gt; 函数是js中的一等公民。有双重身份，即是obj又是function<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">10</span>);<span class="comment">//number</span></span><br><span class="line"><span class="comment">//typeof 返回的是一个字符串类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="keyword">typeof</span> <span class="number">10</span>));<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&#x27;hello&#x27;</span>);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">false</span>);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo);<span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);<span class="comment">//object</span></span><br><span class="line"><span class="comment">// typeof不仅可以检测单个值，加小括号可以检测表达式</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="number">10</span> + <span class="string">&#x27;10&#x27;</span>));<span class="comment">//string</span></span><br></pre></td></tr></table></figure>
<h3 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2.instanceof()"></a>2.instanceof()</h3></li>
</ul>
</li>
</ul>
<p><strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链<br>函数既是function又是object…</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> <span class="built_in">Function</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">String</span>()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> <span class="built_in">String</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h1 id="三、String类型"><a href="#三、String类型" class="headerlink" title="三、String类型"></a>三、String类型</h1><h2 id="1-用引号包裹的就是String类型。————简单理解：String说：穿了我的衣服就是我的人了。"><a href="#1-用引号包裹的就是String类型。————简单理解：String说：穿了我的衣服就是我的人了。" class="headerlink" title="1.用引号包裹的就是String类型。————简单理解：String说：穿了我的衣服就是我的人了。"></a>1.用引号包裹的就是String类型。————简单理解：String说：穿了我的衣服就是我的人了。</h2><h2 id="2-String中的转义字符"><a href="#2-String中的转义字符" class="headerlink" title="2.String中的转义字符"></a>2.String中的转义字符</h2><p>和css中的特殊字符类似</p>
<ul>
<li><code>\&quot;</code> 表示 <code>&quot;</code></li>
<li><code>\&#39;</code> 表示 <code>&#39;</code></li>
<li><code>\\</code> 表示<code>\</code></li>
<li><code>\r</code> 表示回车</li>
<li><code>\n</code> 表示换行。n 的意思是 newline。</li>
<li><code>\t</code> 表示缩进。t 的意思是 tab。</li>
<li><code>\b</code> 表示空格。b 的意思是 blank。</li>
</ul>
<h2 id="3-获取字符串的长度"><a href="#3-获取字符串的长度" class="headerlink" title="3.获取字符串的长度"></a>3.获取字符串的长度</h2><p>String.length</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var str1 = &#x27;1；23&#x27;;</span><br><span class="line">  var str2 = &#x27;小艾 同学&#x27;;</span><br><span class="line">  var str3 = &#x27;ab,cd&#x27;;</span><br><span class="line"></span><br><span class="line">  // 注意：</span><br><span class="line">  // 中文、英文字母、数字都占一个字符</span><br><span class="line">  // 中英文标点符号都占一个字符</span><br><span class="line">  // 空格也占一个字符</span><br><span class="line">  console.log(str1.length);//4</span><br><span class="line">  console.log(str2.length);//5</span><br><span class="line">  console.log(str3.length);//5</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h2 id="4-字符串拼接"><a href="#4-字符串拼接" class="headerlink" title="4.字符串拼接"></a>4.字符串拼接</h2><p>当<code>+</code>号的连接的是一个字符串，就会变成连接符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符串 + 任意数据类型 = 拼接之后的新字符串;</span><br></pre></td></tr></table></figure>
<p>字符串和任何数据类型拼接，都会将拼接内容隐式转为字符串，并输出一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="number">10</span> + <span class="literal">null</span>);<span class="comment">//10</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">10</span> + <span class="literal">true</span>);<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//当加号的左侧或右侧为一个字符串类型时，就会作为连接符</span></span><br><span class="line">  <span class="comment">//将任何数据类型都转为字符串，在返回拼接后的新字符串</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span> + <span class="literal">null</span>);<span class="comment">//10null</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="string">&#x27;10&#x27;</span>);<span class="comment">//true10</span></span><br><span class="line"><span class="comment">//复杂数据类型也会隐式转换为字符串哦</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;小艾同学&#x27;</span> + &#123;&#125;);<span class="comment">//小艾同学[object Object]</span></span><br></pre></td></tr></table></figure>
<p>变量与字符串拼接为了不让转为字符串，通常采用引引加加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串与变量拼接</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 要想在字符串中插入一个变量，就不能让该变量暴露在引号中</span></span><br><span class="line"><span class="comment">//可以用引引加加口诀， &#x27;+a+&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;小艾同学a分&#x27;</span>);<span class="comment">//小艾同学a分</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;小艾同学&#x27;</span> + a + <span class="string">&#x27;分&#x27;</span>);<span class="comment">//小艾同学100分</span></span><br></pre></td></tr></table></figure>
<p>凡是存在隐式转换的地方，都不应该广泛使用，所以字符串拼接是，尽量不用加号隐式转换，推荐使用<code>$&#123;&#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`小<span class="subst">$&#123;a&#125;</span>艾同<span class="subst">$&#123;b&#125;</span>学`</span>);</span><br></pre></td></tr></table></figure>
<h2 id="5-ES6字符串遍历"><a href="#5-ES6字符串遍历" class="headerlink" title="5.ES6字符串遍历"></a>5.ES6字符串遍历</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> str= <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> str)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;字符：&quot;</span>+char);</span><br><span class="line"> <span class="comment">// 字符：1</span></span><br><span class="line"> <span class="comment">// 字符：2</span></span><br><span class="line"> <span class="comment">// 字符：3</span></span><br><span class="line"> <span class="comment">// 字符：4</span></span><br><span class="line"> <span class="comment">// 字符：5</span></span><br><span class="line"> <span class="comment">// 字符：6</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、Number类型"><a href="#四、Number类型" class="headerlink" title="四、Number类型"></a>四、Number类型</h1><h2 id="1-所有的数字都是Number类型"><a href="#1-所有的数字都是Number类型" class="headerlink" title="1.所有的数字都是Number类型"></a>1.所有的数字都是Number类型</h2><p>Js中不存在int,folat类型，正负数，整数，小数都是Number类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0x9</span>;<span class="comment">//前面加0x就是十六进制</span></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">07</span>;<span class="comment">//前面加0代表八进制</span></span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">2e8</span>;<span class="comment">//e表示科学计数法次幂</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//9</span></span><br><span class="line">    <span class="built_in">console</span>.log(num1);<span class="comment">//7</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2);<span class="comment">//1.7976931348623157e+308</span></span><br><span class="line">    <span class="comment">// Number最大范围</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE);<span class="comment">//1.7976931348623157e+308</span></span><br><span class="line">    <span class="comment">// Number最小范围</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE);<span class="comment">//5e-324</span></span><br><span class="line">    <span class="comment">// 无穷大Infinity</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE * <span class="number">2</span>);<span class="comment">//Infinity</span></span><br><span class="line">    <span class="comment">// 无穷小-Infinity</span></span><br><span class="line">    <span class="built_in">console</span>.log(-<span class="built_in">Number</span>.MAX_VALUE * <span class="number">2</span>);<span class="comment">//-Infinity</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>补充进制转换（以100为例）<br>几进制就是逢几进一→十进制逢十进一</p>
</blockquote>
<h4 id="各进制转十进制，就是-几进制的位数-1次幂…"><a href="#各进制转十进制，就是-几进制的位数-1次幂…" class="headerlink" title="各进制转十进制，就是*几进制的位数-1次幂…"></a>各进制转十进制，就是*几进制的位数-1次幂…</h4><ul>
<li>十进制转十进制</li>
</ul>
<p>100 = 1_10^2 + 0_10^1 + 0*10^0 = 100</p>
<ul>
<li>二进制转十进制</li>
</ul>
<p>100 = 1_2^2 + 0_2^1 + 0*2^0 = 4</p>
<ul>
<li>八进制转十进制(以0开头就是八进制)</li>
</ul>
<p>0100= 1_8^2 + 0_8^1 + 0*8^0 = 64</p>
<ul>
<li>十六进制转十进制(以0x开头就是十六进制)</li>
</ul>
<p>0x100 = 1_16^2 + 0_16^1 + 0*16^0 = 256</p>
<h4 id="十进制转各进制就是-该进制的余数倒过来…"><a href="#十进制转各进制就是-该进制的余数倒过来…" class="headerlink" title="十进制转各进制就是/该进制的余数倒过来…"></a>十进制转各进制就是/该进制的余数倒过来…</h4><ul>
<li>十进制转二进制</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1307005/1587290661499-a409744a-df42-4062-9025-1bb38e04c68e.png#align=left&display=inline&height=667&margin=%5Bobject%20Object%5D&originHeight=667&originWidth=859&size=0&status=done&style=none&width=859"></p>
<ul>
<li>别的进制同理</li>
</ul>
<h2 id="2-Number类型的特殊值—NaN"><a href="#2-Number类型的特殊值—NaN" class="headerlink" title="2.Number类型的特殊值—NaN"></a>2.Number类型的特殊值—NaN</h2><p>Not a Numberde 的简写，是Number类型</p>
<p>特点：NaN不等于任何东西，包括他自己</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// NaN不等于任何</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">NaN</span> =-= <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line">  <span class="comment">// 返回NaN的情况</span></span><br><span class="line">  <span class="comment">// 1.字符串计算</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>);<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.类型转换时开头有无法转换成数字的值</span></span><br><span class="line">  <span class="comment">// 不能转换的一定要在开头</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;1a&#x27;</span>));<span class="comment">//1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;a1&#x27;</span>));<span class="comment">//NaN</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>());<span class="comment">//NaN</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;x&#x27;</span>));<span class="comment">//NaN</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;x&#x27;</span>));<span class="comment">//NaN</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="2-1-isNaN（）函数"><a href="#2-1-isNaN（）函数" class="headerlink" title="2.1 isNaN（）函数"></a>2.1 isNaN（）函数</h3><p>用来确定一个值是否为NaN</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isNaN()，判断传入的参数是否为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有0/0会返回true，其他任何数值都是false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">0</span> / <span class="number">0</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">0</span> / <span class="number">1</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">1</span> / <span class="number">0</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">//false（ 10 是一个数值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//能转为数字的别的类型也会返回false,无法转换的返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">//false（可以被转换成数值 10）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;a10&quot;</span>)); <span class="comment">//true（可以被转换成数值 10）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">//true（不能转换成数值）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">//false（可以被转换成数值 1）</span></span><br></pre></td></tr></table></figure>


<h2 id="3-0-1-0-2不等于0-3"><a href="#3-0-1-0-2不等于0-3" class="headerlink" title="3.0.1+0.2不等于0.3"></a>3.0.1+0.2不等于0.3</h2><p>失精<br>参考：<a href="https://juejin.im/post/5b90e00e6fb9a05cf9080dff">https://juejin.im/post/5b90e00e6fb9a05cf9080dff</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//0.30000000000000004</span></span><br></pre></td></tr></table></figure>


<h1 id="五、Boolean类型"><a href="#五、Boolean类型" class="headerlink" title="五、Boolean类型"></a>五、Boolean类型</h1><p>只有两个值：true和false<br>在输出Boolean类型时，不能加引号哦。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>);<span class="comment">//false ---&gt; 布尔类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;false&#x27;</span>);<span class="comment">//false ---&gt; 字符串类型</span></span><br></pre></td></tr></table></figure>
<h1 id="六、Null"><a href="#六、Null" class="headerlink" title="六、Null"></a>六、Null</h1><p>null表示”空对象”，即该处不应该有值，用来表示空指针引用。<br>typeof Null 返回的是object</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>
<h1 id="七、undefined"><a href="#七、undefined" class="headerlink" title="七、undefined"></a>七、undefined</h1><p>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  // 变量声明了未赋值，返回的即使undefined</span><br><span class="line">  var a;</span><br><span class="line">  console.log(a);//undefined</span><br><span class="line">  </span><br><span class="line">  // 检测undefined类型</span><br><span class="line">  console.log(typeof undefined);//undefined</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h1 id="八、比较Null和undefined"><a href="#八、比较Null和undefined" class="headerlink" title="八、比较Null和undefined"></a>八、比较Null和undefined</h1><p>简单理解，以糖葫芦为例，本来应该是一串糖葫芦，undefined相当于就剩一个竹签了，null就是连签都没有…<br>推荐文章<br><a href="https://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html">https://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// null与undefined</span><br><span class="line">console.log(null == undefined);//ture</span><br><span class="line">console.log(null === undefined);//false</span><br><span class="line"></span><br><span class="line">// 计算</span><br><span class="line">console.log(1 + null);//1</span><br><span class="line">console.log(1 + undefined);//NaN</span><br></pre></td></tr></table></figure>


<h1 id="九、基本数据类型和引用数据类型区别"><a href="#九、基本数据类型和引用数据类型区别" class="headerlink" title="九、基本数据类型和引用数据类型区别"></a>九、基本数据类型和引用数据类型区别</h1><h2 id="1-储存位置不同"><a href="#1-储存位置不同" class="headerlink" title="1.储存位置不同"></a>1.储存位置不同</h2><ul>
<li>基本数据类型存放在栈中，数据大小确定，内存空间大小可以分配，直接按值存放的，所以可以直接按值访问。</li>
<li>引用数据类型存放在堆内存中，变量其实是保存的在栈内存中的一个指针（保存的是堆内存中的引用地址)，这个指针指向堆内存。在栈内存中保存的是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象</li>
</ul>
<blockquote>
<p>在JS中，每一个数据都需要一个内存空间。内存空间又被分为两种，栈内存(stack)与堆内存(heap)。<br>堆：先进先出<br>栈：先进后出<br>图示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1307005/1587290661556-a22ecd2b-19b9-49fc-a03e-a3961bdc15a0.png#align=left&display=inline&height=954&margin=%5Bobject%20Object%5D&originHeight=954&originWidth=1713&size=0&status=done&style=none&width=1713"></p>
</blockquote>
<h2 id="2-复制操作"><a href="#2-复制操作" class="headerlink" title="2.复制操作"></a>2.复制操作</h2><ul>
<li>基本数据类型从一个变量向一个变量复制时，会在栈中创建一个新值，然后把值复制到为新变量分配的位置上，改变源数据不会影响到新的变量（互不干涉）</li>
<li>引用类型复制的是存储在栈中的指针，将指针复制到栈中为新变量分配的空间中，而这个指针副本和原指针执行存储在堆中的同一个对象，复制操作结束后，两个变量实际上将引用同一个对象；因此改变其中的一个，将影响另一个；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var a = 10;</span><br><span class="line">  var b = a;</span><br><span class="line">  b = 20;</span><br><span class="line"></span><br><span class="line">  var arr = [&#x27;小&#x27;,&#x27;艾&#x27;,&#x27;同学&#x27;];</span><br><span class="line">  var arr1 = arr;</span><br><span class="line">  arr1.push(&#x27;666&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 基本数据类型复制后，改变复制的变量，原值不受影响</span><br><span class="line">  console.log(a);//10</span><br><span class="line">  console.log(b );//20</span><br><span class="line"></span><br><span class="line">  // 引用类型复制后，改变复制的变量，原值也会跟着改变</span><br><span class="line">  console.log(arr);//[&#x27;小&#x27;,&#x27;艾&#x27;,&#x27;同学&#x27;,&#x27;666&#x27;]</span><br><span class="line">  console.log(arr1);//[&#x27;小&#x27;,&#x27;艾&#x27;,&#x27;同学&#x27;,&#x27;666&#x27;]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>图示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1307005/1587290661598-aba71641-d1c0-4a7a-9606-cd5f1169e7ad.png#align=left&display=inline&height=1214&margin=%5Bobject%20Object%5D&originHeight=1214&originWidth=2880&size=0&status=done&style=none&width=2880"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/02/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
